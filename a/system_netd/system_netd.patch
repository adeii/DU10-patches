
project system/netd/
diff --git a/server/Android.mk b/server/Android.mk
index aff16fb..8f0c11b 100644
--- a/server/Android.mk
+++ b/server/Android.mk
@@ -23,7 +23,7 @@ LOCAL_C_INCLUDES := \
         system/netd/include \
 
 LOCAL_CLANG := true
-LOCAL_CPPFLAGS := -std=c++11 -Wall -Werror
+LOCAL_CPPFLAGS := -std=c++11 -Wall -Werror -Wno-unused-variable -Wno-unused-parameter -Wno-unused-function
 LOCAL_MODULE := netd
 
 LOCAL_SHARED_LIBRARIES := \
@@ -66,7 +66,6 @@ LOCAL_SRC_FILES := \
         PppController.cpp \
         ResolverController.cpp \
         RouteController.cpp \
-        SoftapController.cpp \
         StrictController.cpp \
         TetherController.cpp \
         UidRanges.cpp \
@@ -79,7 +78,23 @@ ifdef WPA_SUPPLICANT_VERSION
   LOCAL_SHARED_LIBRARIES += libwpa_client
   LOCAL_C_INCLUDES += external/wpa_supplicant_8/src/common
 endif
-
+ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
+ifeq ($(BOARD_HAS_QCOM_WLAN), true)
+  LOCAL_CFLAGS += -DQSAP_WLAN
+  LOCAL_SHARED_LIBRARIES += libqsap_sdk
+  LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/sdk/softap/include
+endif
+endif
+ifeq ($(BOARD_HAS_ATH_WLAN),true)
+  LOCAL_CFLAGS += -DATH_WLAN
+  LOCAL_CFLAGS += -DWIFI_MODULE_PATH=\"$(WIFI_DRIVER_MODULE_PATH)\"
+  LOCAL_C_INCLUDES += external/wpa_supplicant_8/wpa_supplicant/src/common
+  LOCAL_SRC_FILES += SoftapControllerATH.cpp
+  LOCAL_SHARED_LIBRARIES := $(LOCAL_SHARED_LIBRARIES) libwpa_client
+else
+   LOCAL_SRC_FILES += SoftapController.cpp
+endif
+       
 include $(BUILD_EXECUTABLE)
 
 include $(CLEAR_VARS)
diff --git a/server/CommandListener.cpp b/server/CommandListener.cpp
index 56acfee..96a5408 100755
--- a/server/CommandListener.cpp
+++ b/server/CommandListener.cpp
@@ -773,6 +773,9 @@ int CommandListener::SoftapCmd::runCommand(SocketClient *cli,
                                         int argc, char **argv) {
     int rc = ResponseCode::SoftapStatusResult;
     char *retbuf = NULL;
+#ifdef QSAP_WLAN
+    char qccmd = 0;
+#endif
 
     if (sSoftapCtrl == NULL) {
       cli->sendMsg(ResponseCode::ServiceStartFailed, "SoftAP is not available", false);
@@ -784,7 +787,24 @@ int CommandListener::SoftapCmd::runCommand(SocketClient *cli,
         return 0;
     }
 
+#ifdef QSAP_WLAN
+
+    if (!strcmp(argv[1], "qccmd")) {
+        rc = qsap_hostd_exec(argc, argv);
+        qccmd = 1;
+    }
+    else if (!strcmp(argv[1], "startap")) {
+    
+#elif defined(ATH_WLAN)
+    if (!strcmp(argv[1], "start")) {
+        rc = sSoftapCtrl->startDriver(argv[2]);
+    } else if (!strcmp(argv[1], "stop")) {
+        rc = sSoftapCtrl->stopDriver(argv[2]);
+    } else if (!strcmp(argv[1], "startap")) {
+
+#else
     if (!strcmp(argv[1], "startap")) {
+#endif
         rc = sSoftapCtrl->startSoftap();
     } else if (!strcmp(argv[1], "stopap")) {
         rc = sSoftapCtrl->stopSoftap();
@@ -797,12 +817,28 @@ int CommandListener::SoftapCmd::runCommand(SocketClient *cli,
         free(retbuf);
         return 0;
     } else if (!strcmp(argv[1], "set")) {
+#ifdef QSAP_WLAN
+        rc = qsapsetSoftap(argc, argv);
+        qccmd = 1;
+#else
         rc = sSoftapCtrl->setSoftap(argc, argv);
+#endif
     } else {
         cli->sendMsg(ResponseCode::CommandSyntaxError, "Unrecognized SoftAP command", false);
         return 0;
     }
 
+#ifdef QSAP_WLAN
+    if (qccmd) {
+        if (!rc) {
+            cli->sendMsg(ResponseCode::CommandOkay, "Softap operation succeeded", false);
+        } else {
+            cli->sendMsg(ResponseCode::OperationFailed, "Softap operation failed", true);
+        }
+        return 0;
+    }
+#endif
+
     if (rc >= 400 && rc < 600)
       cli->sendMsg(rc, "SoftAP command has failed", false);
     else
diff --git a/server/SoftapController.h b/server/SoftapController.h
index 556e7cb..ea0f56e 100755
--- a/server/SoftapController.h
+++ b/server/SoftapController.h
@@ -34,6 +34,10 @@ public:
     SoftapController(SocketListener *sl);
     virtual ~SoftapController();
 
+#ifdef ATH_WLAN
+    int startDriver(const char *iface);
+    int stopDriver(const char *iface);
+#endif 
     int startSoftap();
     int stopSoftap();
     bool isSoftapStarted();
@@ -46,6 +50,10 @@ private:
     int mThreadErr;
     bool mHostapdFlag;
 #endif
+#ifdef ATH_WLAN
+    char mBuf[SOFTAP_MAX_BUFFER_SIZE];
+    char mIface[IFNAMSIZ];
+#endif   
     pid_t mPid;
     bool generatePsk(char *ssid, char *passphrase, char *psk);
 #ifdef LIBWPA_CLIENT_EXISTS
